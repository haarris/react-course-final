//Notes

Goal: Finish it all by end of this week (Fri-Sun). Bismillah.
Properly w/ notes and comments for reference in retrospective.

Course will focus on:
    -   React Basics
    -   React Router
    -   Firebase
    -   Redux
    -   Testing
    -   Progressive Web Apps (PWA)
    -   Payments (Stripe API/Backend)

    -   Redux-Saga
    -   Performance
    -   Hooks
    -   Context API
    -   GraphQL

React theory:
    -   React is a frontend library for

    -   Pre-React webdev landscape:


    -   Declarative Paradigm (vs Imperative):

    -   Component Architecture:

    -   One Way Data Flow:

    -   UI Library:

    -   How to be a GREAT React developer:
        We understand how to be a great developer for React
        by UNDERSTANDING the actual concepts behind the utility
        behind React. 

        "React is a Declarative paradigm (we don't tell our Apps
        exactly what to do), rather we give it a State, some 
        Components through JSX with some Props(erties), give all
        that information a giant JS Object in a Declarative way
        which creates a VirtualDOM that the ReactJS library utilises 
        to update the DOM."

        Senior React Developers focus on:
        1) 'Decide well on Components', breaking down things into 
        different components
        2) 'Decide the State and where it lives', decide appropriately
        what its location is, where it 'lives'
        3) 'What changes when State changes', what part of the 
        VirtualDOM changes via what change in the State


Important NPM commands:
    -   Install dependencies from package.json 

        npm install
    -   Install a package and add to package.json

        npm install package --save
    -   Install a devDependency to package.json

        npm install package --save-dev 
    -   Remove a dependency from package.json 

        npm uninstall package --save
    -   Install a package globally

        npm install package -g

    -   npm start
    -   npm run build = convert into static files 
    

NPM and Yarn are two package managers. 

Create-react-app:
    -   Developed by Facebook to help new developers with React
    -   React is actually developed in a further along JS standard 
    compared to our browsers' JS
    -   Babel (makes sure browser compatibility) and 
    Webpack (makes sure optimisation) take the React 
    JS we write and converts it into a browser friendly readable code 


  - Two ways of developing components: functions or classes
  - Structure your app properly (architecture), 'components' folder
  and within explictly labelling .jsx and .css where relevant

Components: 
    -   Are modular 


Unidirectional Data Flow: 
    -   Incredibly important in React
    -   Actual DOM tree vs Virtual DOM tree (react), React uses the 
    latter for more efficiency, can just target specific nodes instead
    of entire tree, hence we see in real-time it renders only specific
    relevant nodes (i.e. searchbox when typing)
    -   State -> Views -> Actions 
        ^ The model React follows, whatever is updated in the State
        updates in the Views, to which whatever the User clicks on any 
        Action changes the State and the Views get updated etc...
    -   If Data however is NOT situated in State but in one of the 
        components (i.e. a Node that branches out), then React uses this 
        Data here to update the Views (but this is not following the 
        spirit of the concept, still does Unidirectional however)

State is Async: 
    -   So whenever State gets updated or changed through a function or 
        whatever, it is done so in an Async fashion, the ReactJS library 
        will decide when it will update. So if you have a function afterwards
        console.logging the State, there may a 'lag' between the two. 
    -   If you want to get around this, simply do a error handling 
        Callback function 
        inside the actual function, which will have no lag

    handleClick  = () => {
        this.setState({ meaningOfLife: this.state.meaningOfLife + 1},
            () => console.log(this.state.meaningOfLife)) 
            //using arrow fns to avoid saying 'return' 
    }

    -   If we're interacting directly with this.state in a setState method:
        there's no guarantee you might get a previous/current state or 
        hence: 

    handleClick  = () => {
        this.setState((prevState, prevProps) => {
            return meaningOfLife: prevState.meaningOfLife + prevProps.increment} //[1]
        },
            () => console.log(this.state.meaningOfLife)) 
    }

    We can use prevState to gurantee that'll be the latest previous state
    before the update. Use a function instead of an object!

    [1] Why not:
        ({return meaningOfLife: this.state.meaningOfLife + 1})
    The ({}) the normal brackets are replacement of 'return' 
    And prevState = this.state (gurantee of prev state)
    Same thing for prevProps (except you adjust by adding an actual Props
    within the Index.js for App component) instead of + 1
    Also good practise to put the 'props' in the constructor and super()
    because in case we use props in there     